import 'package:camera/camera.dart';
import 'package:flashlight/flashlight.dart';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart';

import 'NSCaptiveText.dart';

class NSCameraProvider extends StatefulWidget {
  final NSCameraControllerDelegate delegate;

  NSCameraProvider({this.delegate});
  @override
  NSCameraProviderState createState() => NSCameraProviderState();
}

class NSCameraProviderState extends State<NSCameraProvider> {
  CameraController controller;
  List<CameraDescription> cameras;
  int selectedCameraIdx;
  String _screenText = 'Loading...';

  @override
  Widget build(BuildContext context) {
    return _cameraPreviewWidget();
  }

  @override
  void initState() {
    super.initState();
    availableCameras().then((availableCameras) {
      cameras = availableCameras;

      if (cameras.length > 0) {
        setState(() {
          selectedCameraIdx = 0;
        });

        _initCameraController(cameras[selectedCameraIdx]);
      } else {
        setState(() {
          _screenText = 'No cameras available';
        });
      }
    }).catchError((err) {
      setState(() {
        _screenText = 'Error: $err.code\nError Message: $err.message';
      });
    });
  }

  Widget _cameraPreviewWidget() {
    if (controller == null || !controller.value.isInitialized) {
      return Expanded(
        child: Center(
          child: NSText(
            _screenText,
            style: TextStyle(fontSize: 20.0, fontWeight: FontWeight.w900),
          ),
        ),
      );
    }

    return Expanded(
      child: Center(
        child: AspectRatio(
          aspectRatio: controller.value.aspectRatio,
          child: CameraPreview(controller),
        ),
      ),
    );
  }

  Future _initCameraController(CameraDescription cameraDescription) async {
    if (controller != null) {
      await controller.dispose();
    }

    controller = CameraController(cameraDescription, ResolutionPreset.high);
    widget.delegate.setListener(controller, this);

    controller.addListener(() {
      if (mounted) {
        setState(() {});
      }

      if (controller.value.hasError) {
        setState(() {
          _screenText = 'Camera error ${controller.value.errorDescription}';
        });
      }
    });

    try {
      await controller.initialize();
    } on CameraException catch (e) {
      String errorText = 'Error: ${e.code}\nError Message: ${e.description}';
      setState(() {
        _screenText = errorText;
      });
    }

    if (mounted) {
      setState(() {});
    }
  }

  void toggleCamera(CameraDescription custom) {
    if (custom != null) {
      _initCameraController(custom);
    } else {
      selectedCameraIdx =
          selectedCameraIdx < cameras.length - 1 ? selectedCameraIdx + 1 : 0;
      CameraDescription selectedCamera = cameras[selectedCameraIdx];
      _initCameraController(selectedCamera);
    }
  }
}

mixin NSCameraControllerDelegateMixin {}

class NSCameraControllerDelegate {
  Function callback;
  // NSCameraControllerDelegateMixin justInCaseSomeDayItWasNeeded;
  // NSCameraControllerDelegate(this.justInCaseSomeDayItWasNeeded);

  CameraController controller;
  NSCameraProviderState holder;

  void setListener(CameraController controller, NSCameraProviderState holder) {
    this.controller = controller;
    this.holder = holder;
  }

  void toggleCamera(CameraDescription custom) {
    holder.toggleCamera(custom);
  }

  Future<String> takePicture({String filePath}) async {
    filePath ??=
        join((await getTemporaryDirectory()).path, '${DateTime.now()}.png');

    await this.controller.takePicture(filePath);
    return filePath;
  }

  Future<void> startVideoRecording({String filePath}) async {
    filePath ??=
        join((await getTemporaryDirectory()).path, '${DateTime.now()}.png');
    await controller.startVideoRecording(filePath);
    return filePath;
  }

  Future<void> stopVideoRecording() async {
    await controller.stopVideoRecording();
  }

  Future<void> resumeVideoRecording() async {
    await controller.resumeVideoRecording();
  }

  Future<void> pauseVideoRecording() async {
    await controller.pauseVideoRecording();
  }

  Future<void> prepareForVideoRecording() async {
    await controller.prepareForVideoRecording();
  }

  Future<void> turnOnFlashLight() async {
    if (await Flashlight.hasFlashlight) {}
    return Flashlight.lightOn();
  }

  Future<void> turnOffFlashLight() async {
    if (await Flashlight.hasFlashlight) {}
    return Flashlight.lightOff();
  }
}
